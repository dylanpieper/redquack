[{"path":"https://dylanpieper.github.io/redquack/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 redquack authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dylanpieper.github.io/redquack/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Pieper. Author, maintainer.","code":""},{"path":"https://dylanpieper.github.io/redquack/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pieper D (2025). redquack: Transfer 'REDCap' Data 'DuckDB'. R package version 0.1.0.","code":"@Manual{,   title = {redquack: Transfer 'REDCap' Data to 'DuckDB'},   author = {Dylan Pieper},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"redquack-","dir":"","previous_headings":"","what":"Transfer REDCap Data to DuckDB","title":"Transfer REDCap Data to DuckDB","text":"Transfer REDCap data DuckDB minimal memory overhead, designed large datasets exceed available RAM.","code":""},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Transfer REDCap Data to DuckDB","text":"Chunked transfers memory efficiency Auto-resume interruptions Optimal data type conversion Timestamped operation logs Configurable API request retries Real-time progress indicators Completion notifications (üîä ü¶Ü)","code":""},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Transfer REDCap Data to DuckDB","text":"CRAN: Development version:","code":"install.packages(\"redquack\") # install.packages(\"pak\") pak::pak(\"dylanpieper/redquack\")"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Transfer REDCap Data to DuckDB","text":"Data REDCap transferred DuckDB configurable chunks record IDs:","code":"library(redquack)  con <- redcap_to_duckdb(   redcap_uri = \"https://redcap.example.org/api/\",   token = \"YOUR_API_TOKEN\",   id_field = \"id\",   chunk_size = 1000     # Increase chunk size for memory-efficient systems (faster)   # Decrease chunk size for memory-constrained systems (slower) )"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"working-with-the-data","dir":"","previous_headings":"Basic Usage","what":"Working with the data","title":"Transfer REDCap Data to DuckDB","text":"Query data dplyr: Create Parquet file directly DuckDB (efficient sharing data): Remember close connection finished:","code":"library(dplyr)  demographics <- tbl(con, \"data\") |>   filter(demographics_complete == 2) |>   select(record_id, age, race, gender) |>   collect()  age_summary <- tbl(con, \"data\") |>   group_by(gender) |>   summarize(     n = n(),     mean_age = mean(age, na.rm = TRUE),     median_age = median(age, na.rm = TRUE)   ) |>   collect() DBI::dbExecute(con, \"COPY (SELECT * FROM data) TO 'redcap.parquet' (FORMAT PARQUET)\") DBI::dbDisconnect(con, shutdown = TRUE)"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"database-structure","dir":"","previous_headings":"","what":"Database structure","title":"Transfer REDCap Data to DuckDB","text":"DuckDB database created redcap_to_duckdb() contains two tables: data: Contains exported REDCap records optimized column types log: Contains timestamped logs transfer process troubleshooting","code":"DBI::dbGetQuery(con, \"SELECT * FROM data LIMIT 10\") DBI::dbGetQuery(con, \"SELECT timestamp, type, message FROM log ORDER BY timestamp\")"},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer 'REDCap' Data to 'DuckDB' ‚Äî redcap_to_duckdb","title":"Transfer 'REDCap' Data to 'DuckDB' ‚Äî redcap_to_duckdb","text":"Transfer REDCap data DuckDB chunks minimize memory usage.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer 'REDCap' Data to 'DuckDB' ‚Äî redcap_to_duckdb","text":"","code":"redcap_to_duckdb(   redcap_uri,   token,   output_file = \"redcap.duckdb\",   chunk_size = 1000,   chunk_delay = 0.5,   max_retries = 3,   raw_or_label = \"raw\",   raw_or_label_headers = \"raw\",   export_checkbox_label = FALSE,   export_survey_fields = FALSE,   export_data_access_groups = FALSE,   filter_logic = \"\",   datetime_range_begin = as.POSIXct(NA),   datetime_range_end = as.POSIXct(NA),   blank_for_gray_form_status = FALSE,   fields = NULL,   forms = NULL,   events = NULL,   id_field = \"id\",   optimize_types = TRUE,   return_duckdb = TRUE,   verbose = TRUE,   beep = TRUE,   ... )"},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer 'REDCap' Data to 'DuckDB' ‚Äî redcap_to_duckdb","text":"redcap_uri Character string specifying URI (uniform resource identifier) REDCap server's API. token Character string containing REDCap API token specific project. token used authentication must export permissions. output_file Character string specifying file path DuckDB database created modified. Default \"redcap.duckdb\" current working directory. chunk_size Integer specifying number record IDs process per chunk. Default 1000. Consider decreasing projects many fields. chunk_delay Numeric value specifying delay seconds chunked requests. Default 0.5 seconds. Adjust respect REDCap server limits. max_retries Integer specifying maximum number retry attempts failed API requests. Default 3. Set 0 disable retries. raw_or_label string (either 'raw' 'label') specifies whether export raw coded values labels options multiple choice fields. Default 'raw'. raw_or_label_headers string (either 'raw' 'label') specifies CSV headers whether export variable/field names (raw) field labels (label). Default 'raw'. export_checkbox_label Logical specifies format checkbox field values specifically exporting data labels. raw_or_label 'label' export_checkbox_label TRUE, values text displayed users. Otherwise, values 0/1. Default FALSE. export_survey_fields Logical specifies whether export survey identifier field (e.g., 'redcap_survey_identifier') survey timestamp fields. Default FALSE. export_data_access_groups Logical specifies whether export redcap_data_access_group field data access groups utilized project. Default FALSE. filter_logic String logic text (e.g., [gender] = 'male') filtering data returned, API return records logic evaluates TRUE. Default empty string. datetime_range_begin return records created modified given datetime, provide POSIXct value. Default NA (begin time). datetime_range_end return records created modified given datetime, provide POSIXct value. Default NA (end time). blank_for_gray_form_status Logical specifies whether export blank values instrument complete status fields gray status icon. Default FALSE. fields Character vector specifying fields export. Default NULL (fields). forms Character vector specifying forms export. Default NULL (forms). events Character vector specifying events export. Default NULL (events). id_field Character string specifying field name contains record identifiers. Default \"id\". optimize_types Logical indicating whether column types optimized data inserted. Default TRUE, analyzes column content converts VARCHAR appropriate types (INTEGER, DOUBLE, DATE, TIMESTAMP). FALSE, columns remain VARCHAR regardless content. return_duckdb Logical indicating whether return DBI connection object. Default TRUE. FALSE, return NULL invisibly. verbose Logical indicating whether show progress completion messages. Default TRUE. beep Logical indicating whether play sound notifications process completes encounters errors. Default TRUE. ... Additional arguments passed REDCap API call.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_duckdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer 'REDCap' Data to 'DuckDB' ‚Äî redcap_to_duckdb","text":"return_duckdb TRUE, returns DBI connection object DuckDB database, whether newly created, partially completed resumed, already complete. Connection attributes: had_errors: Logical indicating errors occurred transfer error_chunks: Vector chunk numbers failed processing () return_duckdb FALSE, returns invisibly.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_duckdb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transfer 'REDCap' Data to 'DuckDB' ‚Äî redcap_to_duckdb","text":"function transfers data REDCap DuckDB chunks, helps manage memory usage dealing large projects. creates two tables DuckDB database: data: Contains transferred REDCap records log: Contains timestamped logs transfer process function automatically detects existing databases handles three ways: database exists, starts new transfer process database exists incomplete, resumes last processed record ID database exists complete, returns connection without reprocessing function fetches record IDs first, processes records chunks. error occurs processing, function stop processing prevent incomplete data. Memory explicitly managed handle large datasets. data initially stored VARCHAR type consistent handling across chunks. optimize_types = TRUE (default), column types automatically converted data inserted, based content analysis: Columns containing integers converted INTEGER Columns containing numeric values converted DOUBLE Columns valid date strings converted DATE Columns valid timestamp strings converted TIMESTAMP columns remain VARCHAR optimize_types = FALSE, columns remain VARCHAR type. can useful : need consistent string-based handling data working complex mixed-type data plan handle type conversions manually subsequent SQL queries Import speed prioritized storage efficiency query optimization","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_duckdb.html","id":"database-connection","dir":"Reference","previous_headings":"","what":"Database Connection","title":"Transfer 'REDCap' Data to 'DuckDB' ‚Äî redcap_to_duckdb","text":"function returns open connection DuckDB database return_duckdb = TRUE. must explicitly close connection DBI::dbDisconnect() finished.","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_duckdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transfer 'REDCap' Data to 'DuckDB' ‚Äî redcap_to_duckdb","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with API token con <- redcap_to_duckdb(   redcap_uri = \"https://redcap.example.org/api/\",   token = \"YOUR_API_TOKEN\",   chunk_size = 1000   # Increase chunk size for memory-efficient systems (faster)   # Decrease chunk size for memory-constrained systems (slower) )  # Query the resulting database data <- DBI::dbGetQuery(con, \"SELECT * FROM data LIMIT 10\")  # View transfer logs logs <- DBI::dbGetQuery(con, \"SELECT * FROM log\")  # Remember to close the connection DBI::dbDisconnect(con, shutdown = TRUE) } # }"},{"path":[]},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"redquack 0.1.0","text":"First release redquack CRAN Transfer REDCap data DuckDB using redcap_to_duckdb() function","code":""}]
