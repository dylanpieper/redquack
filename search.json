[{"path":"https://dylanpieper.github.io/redquack/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 redquack authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dylanpieper.github.io/redquack/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Pieper. Author, maintainer.","code":""},{"path":"https://dylanpieper.github.io/redquack/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pieper D (2025). redquack: Transfer 'REDCap' Data Database. R package version 0.2.0.","code":"@Manual{,   title = {redquack: Transfer 'REDCap' Data to Database},   author = {Dylan Pieper},   year = {2025},   note = {R package version 0.2.0}, }"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"redquack-","dir":"","previous_headings":"","what":"Transfer REDCap Data to Database","title":"Transfer REDCap Data to Database","text":"Transfer REDCap data database use R without exceeding available memory. Compatible databases specifically optimized DuckDB‚Äîfast portable SQL engine first-class integration Posit products.","code":""},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Transfer REDCap Data to Database","text":"size REDCap project outgrowing laptop desktop computer? ever experienced error trying export data via API? ‚ö†Ô∏è Error: vector memory limit 16.0 GB reached, see mem.maxVSize() alone. R objects live entirely local memory, causes problems data gets big eagerly try load R. key strategy prevent error break data smaller chunks offload onto disk remote database lazy retrieval. redquack‚Äôs solution big data problem : Request REDCap record IDs split chunks Request chunk REDCap data (one time) Transfer chunk data database Remove chunk memory, repeat step 2 complete, can retrieve data database continue work (see Data Manipulation).","code":""},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Transfer REDCap Data to Database","text":"redquack additional features make robust improve user experience: Retry API request failures Resume incomplete transfers Convert data types optimized queries Store timestamped operation logs Show progress bar status messages Play sound notifications (quacks success ü¶Ü)","code":""},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Transfer REDCap Data to Database","text":"CRAN: Development version: packages used examples imported redquack:","code":"# install.packages(\"pak\") pak::pak(\"redquack\") pak::pak(\"dylanpieper/redquack\") pak::pak(c(\"dplyr\", \"duckdb\", \"keyring\"))"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"setup-api-token","dir":"","previous_headings":"","what":"Setup API Token","title":"Transfer REDCap Data to Database","text":"API token allows R interface REDCap, stored securely. recommend using keyring package store API token. example:","code":"keyring::key_set(\"redcap_token\")"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Transfer REDCap Data to Database","text":"Data REDCap transferred database via DBI connection chunks record IDs: function returns list metadata class redcap_transfer_result: success: Logical transfer completed failed processing error_chunks: Vector chunk numbers failed processing time_s: Numeric value total seconds transfer optimize data metadata useful programming export pipelines ETL workflows. actual data stored database accessed via connection.","code":"library(redquack)  duckdb <- DBI::dbConnect(duckdb::duckdb(), \"redcap.duckdb\")  result <- redcap_to_db(   conn = duckdb,   redcap_uri = \"https://redcap.example.org/api/\",   token = keyring::key_get(\"redcap_token\"),   record_id_name = \"record_id\",   chunk_size = 1000   )"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"database-structure","dir":"","previous_headings":"","what":"Database Structure","title":"Transfer REDCap Data to Database","text":"database created redcap_to_db() contains two tables: data: Contains exported REDCap records optimized column types log: Contains timestamped logs transfer process troubleshooting","code":"data <- DBI::dbGetQuery(duckdb, \"SELECT * FROM data LIMIT 1000\") log <- DBI::dbGetQuery(duckdb, \"SELECT * FROM log\")"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"data-types","dir":"","previous_headings":"","what":"Data Types","title":"Transfer REDCap Data to Database","text":"Data imported VARCHAR/TEXT consistent handling across chunks. DuckDB, data types automatically optimized transfer improve query performance: INTEGER: Columns whole numbers DOUBLE: Columns decimal numbers DATE: Columns valid dates TIMESTAMP: Columns valid timestamps VARCHAR/TEXT: columns remain strings DuckDB, can query data inspect data types: can also automatically convert data types R using readr: optimize query performance databases, alter database table manually.","code":"DBI::dbGetQuery(duckdb, \"PRAGMA table_info(data)\") readr::type_convert(data)"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"data-manipulation","dir":"","previous_headings":"","what":"Data Manipulation","title":"Transfer REDCap Data to Database","text":"Manipulate data familar dplyr syntax. difference call collect data‚Äîeverything stays . Prior collecting data, DuckDB makes optimized plan retrieve data requested without bringing memory. called lazy evaluation. collect() data memory last step, can make slow process nearly instantaneous. following example data 2,825,092 rows x 397 columns: can also write Parquet file directly DuckDB use arrow. Parquet file 5 times smaller DuckDB file easy share: Remember close connection finished:","code":"library(dplyr)  demographics <- tbl(duckdb, \"data\") |>   filter(is.na(redcap_repeat_instrument)) |>   select(record_id, age, race, sex, gender) |>   collect() system.time(     duckdb |>     tbl(\"data\") |>     collect() |>     group_by(redcap_repeat_instrument) |>     summarize(count = n()) |>     arrange(desc(count)) ) #>   user  system elapsed #>  5.048   5.006   6.077  system.time(     duckdb |>     tbl(\"data\") |>     group_by(redcap_repeat_instrument) |>     summarize(count = n()) |>     arrange(desc(count)) |>     collect() ) #>    user  system elapsed #>   0.040   0.015   0.040 DBI::dbExecute(duckdb, \"COPY (SELECT * FROM data) TO 'redcap.parquet' (FORMAT PARQUET)\") DBI::dbDisconnect(duckdb)"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"collaboration-opportunities","dir":"","previous_headings":"","what":"Collaboration Opportunities","title":"Transfer REDCap Data to Database","text":"package optimized DuckDB, invite collaborators help optimize databases. Target edits R/optimize_data_types.R. Feel free submit PR share ideas may .","code":""},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"other-redcap-interfaces","dir":"","previous_headings":"","what":"Other REDCap Interfaces","title":"Transfer REDCap Data to Database","text":"REDCapR (R package) REDCapTidieR (R package) tidyREDCap (R package) redcapAPI (R package) REDCapSync (R package; development) PyCap (python module)","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer 'REDCap' Data to a Database ‚Äî redcap_to_db","title":"Transfer 'REDCap' Data to a Database ‚Äî redcap_to_db","text":"Transfer REDCap data database chunks minimize memory usage.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer 'REDCap' Data to a Database ‚Äî redcap_to_db","text":"","code":"redcap_to_db(   conn,   data_table_name = \"data\",   log_table_name = \"log\",   redcap_uri,   token,   raw_or_label = \"raw\",   raw_or_label_headers = \"raw\",   export_checkbox_label = FALSE,   export_survey_fields = FALSE,   export_data_access_groups = FALSE,   blank_for_gray_form_status = FALSE,   filter_logic = \"\",   datetime_range_begin = as.POSIXct(NA),   datetime_range_end = as.POSIXct(NA),   fields = NULL,   forms = NULL,   events = NULL,   record_id_name = \"record_id\",   chunk_size = 1000,   chunk_delay = 0.5,   max_retries = 10,   echo = \"all\",   beep = TRUE,   ... )"},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer 'REDCap' Data to a Database ‚Äî redcap_to_db","text":"conn DBI connection object database. data_table_name Character string specifying name table create append data . Default \"data\". Can include schema name (e.g. \"schema.table\"). log_table_name Character string specifying name table store transfer logs. Default \"log\". Can include schema name (e.g. \"schema.log\"). Set NULL disable logging. redcap_uri Character string specifying URI (uniform resource identifier) REDCap server's API. token Character string containing REDCap API token specific project. token used authentication must export permissions. raw_or_label string (either \"raw\" \"label\") specifies whether export raw coded values labels options multiple choice fields. Default \"raw\". raw_or_label_headers string (either \"raw\" \"label\") specifies CSV headers whether export variable/field names (raw) field labels (label). Default \"raw\". export_checkbox_label Logical specifies format checkbox field values specifically exporting data labels. raw_or_label \"label\" export_checkbox_label TRUE, values text displayed users. Otherwise, values 0/1. Default FALSE. export_survey_fields Logical specifies whether export survey identifier field (e.g., 'redcap_survey_identifier') survey timestamp fields. Default FALSE. export_data_access_groups Logical specifies whether export redcap_data_access_group field data access groups utilized project. Default FALSE. blank_for_gray_form_status Logical specifies whether export blank values instrument complete status fields gray status icon. Default FALSE. filter_logic String logic text (e.g., [gender] = 'male') filtering data returned, API return records logic evaluates TRUE. Default empty string. datetime_range_begin return records created modified given datetime, provide POSIXct value. Default NA (begin time). datetime_range_end return records created modified given datetime, provide POSIXct value. Default NA (end time). fields Character vector specifying fields export. Default NULL (fields). forms Character vector specifying forms export. Default NULL (forms). events Character vector specifying events export. Default NULL (events). record_id_name Character string specifying field name contains record identifiers used chunking requests. Default \"record_id\". chunk_size Integer specifying number record IDs process per chunk. Default 1000. Consider decreasing projects many fields. chunk_delay Numeric value specifying delay seconds chunked requests. Default 0.5 seconds. Adjust respect REDCap server limits. max_retries Integer specifying maximum number retry attempts failed API connection HTTP 504 error. Default 10. echo String show progress bar status messages (\"\"), progress bar (\"progress\"), nothing (\"none\"). Default \"\". beep Logical indicating whether play sound notifications process completes encounters errors. Default TRUE. ... Additional arguments passed REDCap API call.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer 'REDCap' Data to a Database ‚Äî redcap_to_db","text":"Returns list following components: success: Logical transfer completed failed processing error_chunks: Vector chunk numbers failed processing time_s: Numeric value total seconds transfer optimize data","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transfer 'REDCap' Data to a Database ‚Äî redcap_to_db","text":"function transfers data REDCap database chunks, helps manage memory usage dealing large projects. creates two tables database: data_table_name: Contains transferred REDCap records log_table_name: Contains timestamped logs transfer process function automatically detects existing databases handles three ways: table exists, starts new transfer process table exists incomplete, resumes last processed record ID table exists complete, returns success without reprocessing function fetches record IDs, processes records chunks. error occurs processing, function continue remaining chunks mark transfer incomplete. Data first set VARCHAR/TEXT type consistent handling across chunks. DuckDB, data types automatically optimized data inserted: INTEGER: Columns whole numbers DOUBLE: Columns decimal numbers DATE: Columns valid dates TIMESTAMP: Columns valid timestamps VARCHAR/TEXT: columns remain strings","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transfer 'REDCap' Data to a Database ‚Äî redcap_to_db","text":"","code":"if (FALSE) { # \\dontrun{ # install.packages(\"pak\") # pak::pak(c(\"duckdb\", \"keyring\", \"redquack\"))  library(redquack)  duckdb <- DBI::dbConnect(duckdb::duckdb(), \"redcap.duckdb\")  result <- redcap_to_db(   redcap_uri = \"https://redcap.example.org/api/\",   token = keyring::key_get(\"redcap_token\"),   conn = duckdb, )  data <- DBI::dbGetQuery(duckdb, \"SELECT * FROM data LIMIT 1000\") log <- DBI::dbGetQuery(duckdb, \"SELECT * FROM log\")  DBI::dbDisconnect(duckdb) } # }"},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"redquack-020","dir":"Changelog","previous_headings":"","what":"redquack 0.2.0","title":"redquack 0.2.0","text":"CRAN release: 2025-05-14","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"lifecycle-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Lifecycle Changes","title":"redquack 0.2.0","text":"Rename redcap_to_duckdb() redcap_to_db() gain conn argument support database connection Return list processing data S3 object (redcap_transfer_result) Rename verbose echo change logical string options: ‚Äú‚Äù (default), ‚Äúprogress‚Äù, ‚Äúnone‚Äù","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"patches-0-2-0","dir":"Changelog","previous_headings":"","what":"Patches","title":"redquack 0.2.0","text":"log_table_name NULL, disable logging Remove dependencies beepr utils Remove optimize_types use connection class check DuckDB Remove return_duckdb return TRUE (complete) FALSE (incomplete) Bump default max_retries 3 10 retries Add HTTP 504 transient error retry Rebrand hex logo","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"redquack-011","dir":"Changelog","previous_headings":"","what":"redquack 0.1.1","title":"redquack 0.1.1","text":"CRAN release: 2025-03-24 First release redquack CRAN","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"patches-0-1-1","dir":"Changelog","previous_headings":"","what":"Patches","title":"redquack 0.1.1","text":"Improve parameter names defaults align REDCap API (e.g., record_id_name = record_id) Fix progress tracking messages audio feedback improved user experience Improve documentation use consistent language","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"redquack 0.1.0","text":"Transfer REDCap data DuckDB using redcap_to_duckdb() function","code":""}]
