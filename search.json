[{"path":"https://dylanpieper.github.io/redquack/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 redquack authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dylanpieper.github.io/redquack/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Pieper. Author, maintainer.","code":""},{"path":"https://dylanpieper.github.io/redquack/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pieper D (2025). redquack: Transfer 'REDCap' Data Database. R package version 0.3.0.","code":"@Manual{,   title = {redquack: Transfer 'REDCap' Data to Database},   author = {Dylan Pieper},   year = {2025},   note = {R package version 0.3.0}, }"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"redquack-","dir":"","previous_headings":"","what":"Transfer REDCap Data to Database","title":"Transfer REDCap Data to Database","text":"Transfer REDCap data database use R without exceeding available memory. Use package small large projects, enjoy features data labeling, converting coded values, hearing “quack” sound success. Compatible databases specifically optimized DuckDB.","code":""},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"use-case-and-solution","dir":"","previous_headings":"","what":"Use Case and Solution","title":"Transfer REDCap Data to Database","text":"project outgrowing computer? seen error using REDCap API retrieve data? Error: vector memory limit 16.0 GB reached, see mem.maxVSize() mean? Well, R objects stored random access memory (RAM). data gets big, hit memory limit. redquack’s solution error store data memory local database easy retrieval R. process: Request record IDs REDCap, split chunks Request one chunk project data time Transfer chunk data database Remove chunk memory, repeat step 2 complete, can retrieve data database use R.","code":""},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Transfer REDCap Data to Database","text":"CRAN: GitHub (development version): packages also used examples:","code":"# install.packages(\"pak\") pak::pak(\"redquack\") pak::pak(\"dylanpieper/redquack\") pak::pak(c(\"keyring\", \"dplyr\"))"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"setup-api-token","dir":"","previous_headings":"","what":"Setup API Token","title":"Transfer REDCap Data to Database","text":"API token allows R interface REDCap instance, stored securely. recommend using keyring package store API token. example: Use token run examples: 9A81268476645C4E5F03428B8AC3AA7B","code":"keyring::key_set(\"redcap\", \"test\")"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Transfer REDCap Data to Database","text":"Data REDCap transferred database connection chunks record IDs: redcap_to_db() returns list metadata class redcap_transfer_result: success: Logical transfer completed failed processing error_chunks: Vector chunk numbers failed processing time_s: Numeric value total seconds transfer optimize data status indicators useful programming workflows. actual data stored database accessed via database connection.","code":"library(redquack) library(dplyr)  conn <- use_duckdb()  result <- redcap_to_db(   conn,   url = \"https://bbmc.ouhsc.edu/redcap/api/\",   token = keyring::key_get(\"redcap\", \"test\") )"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"database-structure","dir":"","previous_headings":"","what":"Database Structure","title":"Transfer REDCap Data to Database","text":"database created redcap_to_db() contains three tables: data: Contains raw REDCap records meta: Contains project metadata labeling coded value conversion logs: Contains operation logs transfer process troubleshooting","code":"data <- tbl_redcap(conn) |> collect() meta <- metadata(conn) logs <- logs(conn)"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"data-types","dir":"","previous_headings":"","what":"Data Types","title":"Transfer REDCap Data to Database","text":"Data initially inserted database VARCHAR/TEXT consistent handling across chunks. DuckDB, data types optimized transfer improve query performance: INTEGER: Columns whole numbers DOUBLE: Columns decimal numbers DATE: Columns valid dates TIMESTAMP: Columns valid timestamps VARCHAR/TEXT: columns remain strings can also query database inspect data types:","code":"inspect(conn)"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"data-manipulation","dir":"","previous_headings":"","what":"Data Manipulation","title":"Transfer REDCap Data to Database","text":"Retrieve manipulate REDCap data familiar dplyr verbs tbl-like syntax. key difference reference database table first using tbl_redcap().","code":""},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"basic-data-retrieval","dir":"","previous_headings":"Data Manipulation","what":"Basic Data Retrieval","title":"Transfer REDCap Data to Database","text":"Access REDCap data single table:","code":"data <- tbl_redcap(conn) |>    collect()"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"working-with-instruments","dir":"","previous_headings":"Data Manipulation","what":"Working with Instruments","title":"Transfer REDCap Data to Database","text":"Retrieve data organized REDCap instruments list: Assign instruments global environment:","code":"instruments <- tbl_redcap(conn) |>   collect_list() tbl_redcap(conn) |>   collect_list() |>   list_to_env()"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"filtering-and-selecting-data","dir":"","previous_headings":"Data Manipulation","what":"Filtering and Selecting Data","title":"Transfer REDCap Data to Database","text":"Use dplyr verbs filter select data collecting:","code":"# Filter to specific participants nutmouse_data <- tbl_redcap(conn) |>   filter(name_last == \"Nutmouse\") |>   collect_labeled_list()  # Select specific columns across all instruments key_vars <- tbl_redcap(conn) |>   select(record_id, email, sex, bmi) |>   collect_list()  # Simple column selection for analysis analysis_data <- tbl_redcap(conn) |>   select(email, sex) |>   collect_labeled()"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"grouping-and-aggregating","dir":"","previous_headings":"Data Manipulation","what":"Grouping and Aggregating","title":"Transfer REDCap Data to Database","text":"Perform complex data manipulation grouping filtering:","code":"# Group by sex and filter to below-average BMI below_avg_bmi <- tbl_redcap(conn) |>   select(record_id, sex, bmi) |>   group_by(sex) |>   filter(bmi < mean(bmi)) |>   arrange(bmi) |>   collect_list()"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"working-with-labels","dir":"","previous_headings":"Data Manipulation","what":"Working with Labels","title":"Transfer REDCap Data to Database","text":"Apply column coded value labels control value conversion (.e., choice mappings). collect_labeled() collect_labeled_list() give control labels applied: Full labeling coded value conversion (default): Keep raw coded values: Column labels : Value conversion :","code":"data <- tbl_redcap(conn) |> collect_labeled()  data$sex #> [1] \"Female\" \"Male\"   \"Male\"   \"Female\" \"Male\"   attr(,\"label\") #> [1] \"Gender\" data <- tbl_redcap(conn) |> collect_labeled(convert = FALSE)  data$sex #> <labelled<integer>[5]>: Gender #> [1] 0 1 1 0 1 #>  #> Labels: #>  value  label #>      0 Female #>      1   Male data <- tbl_redcap(conn) |> collect_labeled(vals = FALSE)  data$sex #> [1] 0 1 1 0 1 #> attr(,\"label\") #> [1] \"Gender\" data <- tbl_redcap(conn) |> collect_labeled(cols = FALSE)  data$sex   #> [1] \"Female\" \"Male\" \"Male\" \"Female\" \"Male\"  attr(data$sex, \"label\") #> NULL"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"exporting-data","dir":"","previous_headings":"Data Manipulation","what":"Exporting Data","title":"Transfer REDCap Data to Database","text":"can also write Parquet file directly DuckDB. Parquet file 5 times smaller DuckDB file easy share:","code":"save_parquet(conn, \"redcap.parquet\")"},{"path":"https://dylanpieper.github.io/redquack/index.html","id":"cleanup","dir":"","previous_headings":"Data Manipulation","what":"Cleanup","title":"Transfer REDCap Data to Database","text":"’re finished working data, clean connection: , need access data , remove/delete database file:","code":"close_duckdb(conn) remove_duckdb(conn)"},{"path":"https://dylanpieper.github.io/redquack/reference/close_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Close DuckDB Connection — close_duckdb","title":"Close DuckDB Connection — close_duckdb","text":"Closes DuckDB connection.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/close_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close DuckDB Connection — close_duckdb","text":"","code":"close_duckdb(conn)"},{"path":"https://dylanpieper.github.io/redquack/reference/close_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close DuckDB Connection — close_duckdb","text":"conn DuckDB connection object.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/close_duckdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close DuckDB Connection — close_duckdb","text":"Invisible NULL.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/close_duckdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close DuckDB Connection — close_duckdb","text":"","code":"if (FALSE) { # \\dontrun{ conn <- use_duckdb() # Use the connection... close_duckdb(conn) } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/collect_labeled.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect Labeled Data from Database Table — collect_labeled","title":"Collect Labeled Data from Database Table — collect_labeled","text":"Collect data database table reference (tbl) apply column /value labels REDCap metadata using labelled package. function works tidy style dplyr.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/collect_labeled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect Labeled Data from Database Table — collect_labeled","text":"","code":"collect_labeled(   data,   cols = TRUE,   vals = TRUE,   convert = TRUE,   metadata_table_name = \"metadata\" )"},{"path":"https://dylanpieper.github.io/redquack/reference/collect_labeled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect Labeled Data from Database Table — collect_labeled","text":"data tbl_sql object (database table reference) apply labels . connection table name automatically extracted. cols Logical indicating whether apply column (variable) labels. Default TRUE. vals Logical indicating whether apply value labels coded variables. Default TRUE. convert Logical indicating whether convert coded values text labels (e.g., 0/1 becomes \"\"/\"Yes\"). Default TRUE. metadata_table_name Character string specifying metadata table name. Default \"metadata\".","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/collect_labeled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect Labeled Data from Database Table — collect_labeled","text":"data frame labels applied according cols vals parameters. convert = TRUE, coded values converted text.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/collect_labeled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect Labeled Data from Database Table — collect_labeled","text":"","code":"if (FALSE) { # \\dontrun{ library(redquack) duckdb <- DBI::dbConnect(duckdb::duckdb(), \"redcap.duckdb\")  # Apply both column and value labels (default) labeled_data <- tbl_redcap(duckdb, \"data\") |> collect_labeled()  # Apply only column labels col_labeled_data <- tbl_redcap(duckdb, \"data\") |> collect_labeled(vals = FALSE)  # Apply only value labels val_labeled_data <- tbl_redcap(duckdb, \"data\") |> collect_labeled(cols = FALSE)  # Apply labels and convert values to text labeled_data <- tbl_redcap(duckdb, \"data\") |> collect_labeled(convert = TRUE)  # Explicit metadata table name (useful after complex filtering) labeled_data <- tbl(duckdb, \"data\") |>   dplyr::filter(name_last == \"Nutmouse\") |>   collect_labeled(metadata_table_name = \"metadata\")  DBI::dbDisconnect(duckdb) } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/collect_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect a Database Table into to List of REDCap Instruments — collect_list","title":"Collect a Database Table into to List of REDCap Instruments — collect_list","text":"Takes database table reference (tbl) collects list instruments column value labels optional coded value conversion. function works tidy style dplyr separates data REDCap instruments. Use collect_labeled_list alias functionality.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/collect_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect a Database Table into to List of REDCap Instruments — collect_list","text":"","code":"collect_list(   data,   col_labels = FALSE,   val_labels = FALSE,   convert = FALSE,   metadata_table_name = \"metadata\" )  collect_labeled_list(   data,   col_labels = TRUE,   val_labels = TRUE,   convert = TRUE,   metadata_table_name = \"metadata\" )"},{"path":"https://dylanpieper.github.io/redquack/reference/collect_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect a Database Table into to List of REDCap Instruments — collect_list","text":"data tbl object referencing database table (created tbl(conn, \"data\")). col_labels Logical indicating whether apply column (variable) labels. Default FALSE. val_labels Logical indicating whether apply value labels coded variables. Default FALSE. convert Logical indicating whether convert labeled values text labels (e.g., 0/1 becomes \"\"/\"Yes\"). Default FALSE. metadata_table_name Character string specifying metadata table name. Default \"metadata\".","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/collect_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collect a Database Table into to List of REDCap Instruments — collect_list","text":"Returns named list data frames, one per instrument. one instrument present, returns single data frame instead list.","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/redquack/reference/collect_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collect a Database Table into to List of REDCap Instruments — collect_list","text":"","code":"if (FALSE) { # \\dontrun{ library(redquack) library(dplyr)  conn <- use_duckdb()  result <- redcap_to_db(   conn,   url = \"https://bbmc.ouhsc.edu/redcap/api/\",   token = \"9A81268476645C4E5F03428B8AC3AA7B\" )  # Convert table to a list of instruments instruments <- tbl_redcap(conn) |>   collect_list()  # Control labeling behavior instruments_no_val_labels <- tbl_redcap(conn) |>   collect_list(col_labels = FALSE)  # Convert coded values to text labels instruments_with_codes <- tbl_redcap(conn) |>   collect_list(convert = TRUE)  # Works with filtered data filtered_instruments <- tbl_redcap(conn) |>   filter(name_last == \"Nutmouse\") |>   collect_list()  remove_duckdb(conn) } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect Data Table Structure — inspect","title":"Inspect Data Table Structure — inspect","text":"Inspects structure data table showing column information including name, type, properties. convenience wrapper around DBI::dbGetQuery() examining table schema. Uses data table name stored connection attributes available.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect Data Table Structure — inspect","text":"","code":"inspect(conn, table_name = NULL)"},{"path":"https://dylanpieper.github.io/redquack/reference/inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect Data Table Structure — inspect","text":"conn DuckDB connection object. table_name Character string specifying table name. NULL, uses table name stored connection attributes. Default NULL.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect Data Table Structure — inspect","text":"data frame containing table information columns column ID, name, type, null status, default value, primary key.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect Data Table Structure — inspect","text":"","code":"if (FALSE) { # \\dontrun{ table_info <- inspect(conn) } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/list_to_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign List to Global Environment — list_to_env","title":"Assign List to Global Environment — list_to_env","text":"Assign list instruments (data frames) global environment. element list becomes separate object global environment.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/list_to_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign List to Global Environment — list_to_env","text":"","code":"list_to_env(instruments)"},{"path":"https://dylanpieper.github.io/redquack/reference/list_to_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign List to Global Environment — list_to_env","text":"instruments named list data frames, typically output tbl_to_list().","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/list_to_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign List to Global Environment — list_to_env","text":"Invisibly returns NULL. Side effect: assigns objects global environment.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/list_to_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign List to Global Environment — list_to_env","text":"","code":"if (FALSE) { # \\dontrun{ tbl(conn, \"data\") |>   tbl_to_list() |>   list_to_env() } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/logs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Log Table — logs","title":"Get Log Table — logs","text":"Creates tbl reference log table database automatically collects data frame. Uses log table name stored connection attributes available.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/logs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Log Table — logs","text":"","code":"logs(conn, log_table_name = NULL)"},{"path":"https://dylanpieper.github.io/redquack/reference/logs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Log Table — logs","text":"conn DuckDB connection object. log_table_name Character string specifying log table name. NULL, uses table name stored connection attributes. Default NULL.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/logs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Log Table — logs","text":"data frame containing log data.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/logs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Log Table — logs","text":"","code":"if (FALSE) { # \\dontrun{ log <- logs(conn) } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Metadata Table — metadata","title":"Get Metadata Table — metadata","text":"Creates tbl reference metadata table database automatically collects data frame. Uses metadata table name stored connection attributes available.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Metadata Table — metadata","text":"","code":"metadata(conn, metadata_table_name = NULL)"},{"path":"https://dylanpieper.github.io/redquack/reference/metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Metadata Table — metadata","text":"conn DuckDB connection object. metadata_table_name Character string specifying metadata table name. NULL, uses table name stored connection attributes. Default NULL.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Metadata Table — metadata","text":"data frame containing metadata.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Metadata Table — metadata","text":"","code":"if (FALSE) { # \\dontrun{ meta <- metadata(conn) } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Transfer 'REDCap' Data to a Database — redcap_to_db","title":"Transfer 'REDCap' Data to a Database — redcap_to_db","text":"Transfer REDCap data database chunks record IDs minimize memory usage.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transfer 'REDCap' Data to a Database — redcap_to_db","text":"","code":"redcap_to_db(   conn,   url,   token,   data_table_name = \"data\",   log_table_name = \"logs\",   metadata_table_name = \"metadata\",   export_survey_fields = FALSE,   export_data_access_groups = FALSE,   blank_for_gray_form_status = FALSE,   filter_logic = \"\",   datetime_range_begin = as.POSIXct(NA),   datetime_range_end = as.POSIXct(NA),   fields = NULL,   forms = NULL,   events = NULL,   record_id_name = \"record_id\",   chunk_size = 1000,   chunk_delay = 0.5,   max_retries = 10,   echo = \"all\",   beep = TRUE,   ... )"},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transfer 'REDCap' Data to a Database — redcap_to_db","text":"conn DBI connection object database. url Character string specifying URI (uniform resource identifier) REDCap server's API. token Character string containing REDCap API token specific project. token used authentication must export permissions. data_table_name Character string specifying name table create append data . Default \"data\". Can include schema name (e.g. \"schema.table\"). log_table_name Character string specifying name table store transfer logs. Default \"logs\". Can include schema name (e.g. \"schema.logs\"). Set NULL disable logging. metadata_table_name Character string specifying name table store REDCap metadata. Default \"metadata\". Can include schema name (e.g. \"schema.metadata\"). export_survey_fields Logical specifies whether export survey identifier field (e.g., 'redcap_survey_identifier') survey timestamp fields. Default FALSE. export_data_access_groups Logical specifies whether export redcap_data_access_group field data access groups utilized project. Default FALSE. blank_for_gray_form_status Logical specifies whether export blank values instrument complete status fields gray status icon. Default FALSE. filter_logic String logic text (e.g., [gender] = 'male') filtering data returned, API return records logic evaluates TRUE. Default empty string. datetime_range_begin return records created modified given datetime, provide POSIXct value. Default NA (begin time). datetime_range_end return records created modified given datetime, provide POSIXct value. Default NA (end time). fields Character vector specifying fields export. Default NULL (fields). forms Character vector specifying forms export. Default NULL (forms). events Character vector specifying events export. Default NULL (events). record_id_name Character string specifying field name contains record identifiers used chunking requests. Default \"record_id\". chunk_size Integer specifying number record IDs process per chunk. Default 1000. Consider decreasing projects many fields. chunk_delay Numeric value specifying delay seconds chunked requests. Default 0.5 seconds. Adjust respect REDCap server limits. max_retries Integer specifying maximum number retry attempts failed API connection HTTP 504 error. Default 10. echo String show progress bar status messages (\"\"), progress bar (\"progress\"), nothing (\"none\"). Default \"\". beep Logical indicating whether play sound notifications process completes encounters errors. Default TRUE. ... Additional arguments passed REDCap API call.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transfer 'REDCap' Data to a Database — redcap_to_db","text":"Returns list following components: success: Logical transfer completed failed processing error_chunks: Vector chunk numbers failed processing time_s: Numeric value total seconds transfer optimize data","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transfer 'REDCap' Data to a Database — redcap_to_db","text":"function transfers data REDCap database chunks, helps manage memory usage dealing large projects. creates three tables database: data_table_name: Contains transferred REDCap records metadata_table_name: Contains REDCap metadata field definitions labeling log_table_name: Contains timestamped logs transfer process function automatically detects existing databases handles three ways: table exists, starts new transfer process table exists incomplete, resumes last processed record ID table exists complete, returns success without reprocessing function fetches record IDs, processes records chunks. error occurs processing, function continue remaining chunks mark transfer incomplete. Data first set VARCHAR/TEXT type consistent handling across chunks. DuckDB, data types automatically optimized data inserted: INTEGER: Columns whole numbers DOUBLE: Columns decimal numbers DATE: Columns valid dates TIMESTAMP: Columns valid timestamps VARCHAR/TEXT: columns remain strings","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/redquack/reference/redcap_to_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transfer 'REDCap' Data to a Database — redcap_to_db","text":"","code":"if (FALSE) { # \\dontrun{ library(redquack) library(dplyr)  conn <- use_duckdb()  result <- redcap_to_db(   conn,   url = \"https://bbmc.ouhsc.edu/redcap/api/\",   token = \"9A81268476645C4E5F03428B8AC3AA7B\" )  data <- tbl_redcap(conn) |>   collect()  remove_duckdb(conn) } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/remove_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove DuckDB Database — remove_duckdb","title":"Remove DuckDB Database — remove_duckdb","text":"Closes DuckDB connection removes database file.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/remove_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove DuckDB Database — remove_duckdb","text":"","code":"remove_duckdb(conn, dbname = \"redcap.duckdb\")"},{"path":"https://dylanpieper.github.io/redquack/reference/remove_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove DuckDB Database — remove_duckdb","text":"conn DuckDB connection object. dbname Character string specifying database file name. Default \"redcap.duckdb\".","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/remove_duckdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove DuckDB Database — remove_duckdb","text":"Invisible NULL.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/remove_duckdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove DuckDB Database — remove_duckdb","text":"","code":"if (FALSE) { # \\dontrun{ conn <- use_duckdb() # Use the connection... remove_duckdb(conn) } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/save_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Data to Parquet — save_parquet","title":"Save Data to Parquet — save_parquet","text":"Saves data directly database Parquet file using DuckDB's native COPY command. much faster reading R first creates smaller files easy sharing. Uses data table name stored connection attributes available.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/save_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Data to Parquet — save_parquet","text":"","code":"save_parquet(   conn,   file_path = \"redcap.parquet\",   table_name = NULL,   query = NULL )"},{"path":"https://dylanpieper.github.io/redquack/reference/save_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Data to Parquet — save_parquet","text":"conn DuckDB connection object. file_path Character string specifying output file path. Default \"redcap.parquet\". table_name Character string specifying source table name. NULL, uses table name stored connection attributes. Default NULL. query Character string custom SQL query export. provided, table_name ignored.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/save_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save Data to Parquet — save_parquet","text":"Invisible NULL. Side effect: creates Parquet file specified path.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/save_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save Data to Parquet — save_parquet","text":"","code":"if (FALSE) { # \\dontrun{ # Save entire data table save_parquet(conn, \"redcap.parquet\") } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/tbl_redcap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create REDCap Data Table Reference — tbl_redcap","title":"Create REDCap Data Table Reference — tbl_redcap","text":"Creates tbl reference main REDCap data table database. original table name stored attribute preserve context dplyr operations (limited filter, select, arrange, group_by). Uses data table name stored connection attributes available.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/tbl_redcap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create REDCap Data Table Reference — tbl_redcap","text":"","code":"tbl_redcap(conn, table_name = NULL)"},{"path":"https://dylanpieper.github.io/redquack/reference/tbl_redcap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create REDCap Data Table Reference — tbl_redcap","text":"conn DuckDB connection object. table_name Character string specifying table name. NULL, uses table name stored connection attributes. Default NULL.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/tbl_redcap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create REDCap Data Table Reference — tbl_redcap","text":"tbl_sql object referencing data table redcap_table attribute.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/tbl_redcap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create REDCap Data Table Reference — tbl_redcap","text":"","code":"if (FALSE) { # \\dontrun{ data <- tbl_redcap(conn) } # }"},{"path":"https://dylanpieper.github.io/redquack/reference/use_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create DuckDB Connection — use_duckdb","title":"Create DuckDB Connection — use_duckdb","text":"Creates DuckDB connection REDCap database file.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/use_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create DuckDB Connection — use_duckdb","text":"","code":"use_duckdb(dbname = \"redcap.duckdb\")"},{"path":"https://dylanpieper.github.io/redquack/reference/use_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create DuckDB Connection — use_duckdb","text":"dbname Character string specifying database file name. Default \"redcap.duckdb\".","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/use_duckdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create DuckDB Connection — use_duckdb","text":"DuckDB connection object.","code":""},{"path":"https://dylanpieper.github.io/redquack/reference/use_duckdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create DuckDB Connection — use_duckdb","text":"","code":"if (FALSE) { # \\dontrun{ conn <- use_duckdb() # Use the connection... remove_duckdb(conn) } # }"},{"path":[]},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"redquack 0.3.0","text":"use_duckdb() close_duckdb() database connection management remove_duckdb() cleanup file removal tbl_redcap() creating table references dplyr support collect_labeled() collect_labeled_list() data REDCap labels collect_list() splitting data instrument-specific tables list_to_env() loading instruments global environment metadata() logs() accessing stored metadata transfer logs inspect() examining table structure save_parquet() efficient data export","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"lifecycle-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Lifecycle Changes","title":"redquack 0.3.0","text":"Rename redcap_uri parameter url redcap_to_db() simplicity Rename verbose echo redcap_to_db() change logical string options: “” (default), “progress”, “none”, designed help integration packages progress bar desired Add metadata_table_name parameter redcap_to_db() storing REDCap field definitions Remove data export formatting parameters (raw_or_label, raw_or_label_headers, export_checkbox_label) redcap_to_db() labeling now handled collection functions Import dplyr, dbplyr, duckdb, labelled, rlang new dependencies","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor Improvements","title":"redquack 0.3.0","text":"Add S3 methods dplyr verbs (filter, select, arrange, group_by) preserve REDCap table attributes Automatic record ID preservation across multiple instruments","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"redquack-020","dir":"Changelog","previous_headings":"","what":"redquack 0.2.0","title":"redquack 0.2.0","text":"CRAN release: 2025-05-14","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"lifecycle-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Lifecycle Changes","title":"redquack 0.2.0","text":"Rename redcap_to_duckdb() redcap_to_db() gain conn argument support database connection Return list processing data S3 object (redcap_transfer_result)","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"patches-0-2-0","dir":"Changelog","previous_headings":"","what":"Patches","title":"redquack 0.2.0","text":"log_table_name NULL, disable logging Remove dependencies beepr utils Remove optimize_types use connection class check DuckDB Remove return_duckdb return TRUE (complete) FALSE (incomplete) Bump default max_retries 3 10 retries Add HTTP 504 transient error retry Rebrand hex logo","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"redquack-011","dir":"Changelog","previous_headings":"","what":"redquack 0.1.1","title":"redquack 0.1.1","text":"CRAN release: 2025-03-24 First release redquack CRAN","code":""},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"patches-0-1-1","dir":"Changelog","previous_headings":"","what":"Patches","title":"redquack 0.1.1","text":"Improve parameter names defaults align REDCap API (e.g., record_id_name = record_id) Fix progress tracking messages audio feedback improved user experience Improve documentation use consistent language","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/redquack/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"redquack 0.1.0","text":"Transfer REDCap data DuckDB using redcap_to_duckdb() function","code":""}]
